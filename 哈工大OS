
1.head.s：首先它加载各个数 据段寄存器，重新设置中断描述符表 IDT，共 256 项，并使各个表项均指向一个
只报错误的哑中断子程 序 ignore_int。对于系统中需要使用的一些中断，内核会在其继续初始化的处理过程中（init/main.c）
重新设置这些中断的中断描述符项，让它们指向对应的实际处理过程.

序设置管理内存的分页处理机制，将页目录表放在绝对物理地址 0 开始处（也是本程序所处 的物理内存位置，因此这段程序已执
行部分将被覆盖掉） ，紧随后面会放置共可寻址 16MB 内存的 4 个 页表，并分别设置它们的表项。

最后，head.s程序利用返回指令将预先放置在堆栈中的/init/main.c程序的入口地址弹出，去运行main() 程序。 
--------------------------------------------------------------------------------------------------------
2.在内核源代码的 init/目录中只有一个 main.c 文件。系统在执行完 boot/head.s 程序后就会将执行权交 给 main.c。该程序
虽然不长，但却包括了内核初始化的所有工作。


main.c程序首先利用前面setup.s程序取得的机器参数设置系统的根文件设备号以及一些内存全局变 量。这些内存变量指明了主内存
区的开始地址、系统所拥有的内存容量和作为高速缓冲区内存的末端地 址。如果还定义了虚拟盘（RAMDISK），则主内存区将适当减
少。
然后，内核进行各方面的硬件初始化工作。包括陷阱门、块设备、字符设备和 tty，还包括人工设置 第一个任务（task 0）。待所有
初始化工作完成后，程序就设置中断允许标志以开启中断，并切换到任务 0 中运行。到此时，可以说内核已基本完成所有设置工作。
接下来内核会通过任务 0 创建几个最初的任 务，运行 shell 程序并显示命令行提示符，从而 Linux 系统进入正常运行阶段。 
